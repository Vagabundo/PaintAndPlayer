/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package prFinal;

import javax.swing.*;
import java.io.*;
import java.awt.*;
import java.awt.event.*;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Shape;
import java.awt.color.*;
import java.awt.geom.*;
import java.awt.image.*;
import java.util.*;
import javax.imageio.*;
import javax.swing.filechooser.*;
import static prFinal.LookupTableProducer.*;
/**
 * Clase principal de la aplicación, sobre la que se manejan la mayoría de los eventos y acciones.
 * Consta de un menú en la parte de arriba, para lanzar las diferentes subaplicaciones, y dos barras de herramientas
 * en la parte de abajo que manejan la edición de formas e imagenes de la ventana interna correspondiente
 * 
 * @author Roberto
 * 
 */

public class JFramePrFinal extends javax.swing.JFrame {

    /**
     * Creates new form JFramePrFinal
     * @param colorLinea color de las lineas a pintar
     * @param colorRelleno color del relleno
     * @param figura figura seleccionada por el usuario
     * @param grosor grosor de las lineas a dibujar
     * @param imgsrc imagen fuente
     * @param nombre de imagen a cargar o a guardar
     * @param alturaImagen altura de la imagen a crear
     * @param anchoImagen ancho de la imagen a crear
     * @param filterImagen filtro de imagen de los JChooser
     * @param filterSound filtro de sonido de los JChooser
     * @param filterVideo filtro de video de los JChooser
     * @param filterCompatible filtro de archivos que podemos abrir
     */
    Color colorLinea, colorRelleno;
    int figura;
    float grosor;
    BufferedImage imgsrc;
    
    String nombreImagen;
    int alturaImagen, anchoImagen;
    FileNameExtensionFilter filterImagen = null;
    FileNameExtensionFilter filterSound = null;
    FileNameExtensionFilter filterVideo = null;
    FileNameExtensionFilter filterCompatible = null;
    
            
    public JFramePrFinal() {
        colorLinea = Color.black;
        colorRelleno = Color.black;
        figura = 1;
        grosor = 1;
        imgsrc = null;
        nombreImagen = null;
        alturaImagen = 0;
        anchoImagen = 0;
        filterImagen = new FileNameExtensionFilter("JPG & GIF", "jpg", "gif");
        filterSound = new FileNameExtensionFilter("WAV", "wav");
        filterVideo = new FileNameExtensionFilter("AVI", "avi");
        filterCompatible = new FileNameExtensionFilter("Archivos compatibles", "jpg", "gif", "wav", "avi");
                
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Colores = new javax.swing.ButtonGroup();
        Figura = new javax.swing.ButtonGroup();
        jDesktopPane1 = new javax.swing.JDesktopPane();
        jPanelDown = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        barraEstado = new javax.swing.JTextPane();
        jPanelIzq = new javax.swing.JPanel();
        jPanelDer = new javax.swing.JPanel();
        jPanelUp = new javax.swing.JPanel();
        jPanelCenter = new javax.swing.JPanel();
        jPanelCenDo = new javax.swing.JPanel();
        jPanelEdicion = new javax.swing.JTabbedPane();
        jPanelFormas = new javax.swing.JPanel();
        BotonRelleno = new javax.swing.JCheckBox();
        BotonMover = new javax.swing.JCheckBox();
        Grosor = new javax.swing.JSpinner();
        jScrollPaneGrosor = new javax.swing.JScrollPane();
        TextoGrosor = new javax.swing.JTextPane();
        jPanelColores = new javax.swing.JPanel();
        BotonVerde = new javax.swing.JButton();
        BotonAzul = new javax.swing.JButton();
        BotonRojo = new javax.swing.JButton();
        BotonNegro = new javax.swing.JButton();
        BotonBlanco = new javax.swing.JButton();
        BotonAmarillo = new javax.swing.JButton();
        BotonPunto = new javax.swing.JButton();
        BotonLinea = new javax.swing.JButton();
        BotonRect = new javax.swing.JButton();
        BotonOval = new javax.swing.JButton();
        jScrollPaneLinea = new javax.swing.JScrollPane();
        TextoGrosor1 = new javax.swing.JTextPane();
        BoxLinea = new javax.swing.JComboBox();
        jButtonColorLChooser = new javax.swing.JButton();
        panelColorL = new javax.swing.JTextField();
        BotonRectOval = new javax.swing.JButton();
        jButtonColorRChooser = new javax.swing.JButton();
        panelColorR = new javax.swing.JTextField();
        BoxRelleno = new javax.swing.JComboBox();
        jPanelProcesamiento = new javax.swing.JPanel();
        jPanelBrillo = new javax.swing.JPanel();
        deslizadorBrillo = new javax.swing.JSlider();
        jPanelRotacion = new javax.swing.JPanel();
        deslizadorRotacion = new javax.swing.JSlider();
        boton90 = new javax.swing.JButton();
        boton180 = new javax.swing.JButton();
        boton270 = new javax.swing.JButton();
        jPanelContraste = new javax.swing.JPanel();
        botonContrNormal = new javax.swing.JButton();
        botonContrIlum = new javax.swing.JButton();
        botonContrOscur = new javax.swing.JButton();
        jPanelFiltro = new javax.swing.JPanel();
        boxFiltro = new javax.swing.JComboBox();
        jPanelEscala = new javax.swing.JPanel();
        jButtonAumen = new javax.swing.JButton();
        jButtonDismin = new javax.swing.JButton();
        escritorio = new javax.swing.JDesktopPane();
        MenuBar = new javax.swing.JMenuBar();
        MenuArchivo = new javax.swing.JMenu();
        MenuItemNuevo = new javax.swing.JMenuItem();
        MenuItemAbrir = new javax.swing.JMenuItem();
        MenuItemGuardar = new javax.swing.JMenuItem();
        MenuImagen = new javax.swing.JMenu();
        MenuItemReescalar = new javax.swing.JMenuItem();
        MenuItemFiltro = new javax.swing.JMenuItem();
        MenuItemRotar = new javax.swing.JMenuItem();
        MenuItemContraste = new javax.swing.JMenuItem();
        MenuItemEscalar = new javax.swing.JMenuItem();
        MenuItemCombinar = new javax.swing.JMenuItem();
        MenuItemColorConv = new javax.swing.JMenuItem();
        MenuSonido = new javax.swing.JMenu();
        MenuItemAudioPlay = new javax.swing.JMenuItem();
        MenuItemAudioRec = new javax.swing.JMenuItem();
        MenuVideo = new javax.swing.JMenu();
        MenuItemVideoPlay = new javax.swing.JMenuItem();

        javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
        jDesktopPane1.setLayout(jDesktopPane1Layout);
        jDesktopPane1Layout.setHorizontalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jDesktopPane1Layout.setVerticalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Práctica Final");

        jPanelDown.setLayout(new java.awt.BorderLayout());

        barraEstado.setEditable(false);
        barraEstado.setBackground(new java.awt.Color(240, 240, 240));
        barraEstado.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        barraEstado.setText("Punto");
        jScrollPane1.setViewportView(barraEstado);

        jPanelDown.add(jScrollPane1, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(jPanelDown, java.awt.BorderLayout.PAGE_END);

        jPanelIzq.setLayout(new java.awt.BorderLayout());
        getContentPane().add(jPanelIzq, java.awt.BorderLayout.LINE_START);

        jPanelDer.setLayout(new java.awt.BorderLayout());
        getContentPane().add(jPanelDer, java.awt.BorderLayout.LINE_END);

        jPanelUp.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanelUp.setLayout(new javax.swing.BoxLayout(jPanelUp, javax.swing.BoxLayout.LINE_AXIS));
        getContentPane().add(jPanelUp, java.awt.BorderLayout.PAGE_START);

        jPanelCenter.setLayout(new java.awt.BorderLayout());

        jPanelCenDo.setLayout(new java.awt.BorderLayout());

        BotonRelleno.setText("Relleno");
        BotonRelleno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonRellenoActionPerformed(evt);
            }
        });

        BotonMover.setText("Editar");

        Grosor.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(1.0f), Float.valueOf(1.0f), Float.valueOf(13.0f), Float.valueOf(1.0f)));
        Grosor.setToolTipText("Gr");
        Grosor.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                GrosorStateChanged(evt);
            }
        });

        TextoGrosor.setEditable(false);
        TextoGrosor.setBackground(new java.awt.Color(240, 240, 240));
        TextoGrosor.setText("Grosor");
        jScrollPaneGrosor.setViewportView(TextoGrosor);

        BotonVerde.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 255, 0), 12));
        Colores.add(BotonVerde);
        BotonVerde.setContentAreaFilled(false);
        BotonVerde.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonVerdeActionPerformed(evt);
            }
        });

        BotonAzul.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 255), 12));
        Colores.add(BotonAzul);
        BotonAzul.setContentAreaFilled(false);
        BotonAzul.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonAzulActionPerformed(evt);
            }
        });

        BotonRojo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 0, 0), 12));
        Colores.add(BotonRojo);
        BotonRojo.setContentAreaFilled(false);
        BotonRojo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonRojoActionPerformed(evt);
            }
        });

        BotonNegro.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 12));
        Colores.add(BotonNegro);
        BotonNegro.setContentAreaFilled(false);
        BotonNegro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonNegroActionPerformed(evt);
            }
        });

        BotonBlanco.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 12));
        Colores.add(BotonBlanco);
        BotonBlanco.setContentAreaFilled(false);
        BotonBlanco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonBlancoActionPerformed(evt);
            }
        });

        BotonAmarillo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 0), 12));
        Colores.add(BotonAmarillo);
        BotonAmarillo.setContentAreaFilled(false);
        BotonAmarillo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonAmarilloActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelColoresLayout = new javax.swing.GroupLayout(jPanelColores);
        jPanelColores.setLayout(jPanelColoresLayout);
        jPanelColoresLayout.setHorizontalGroup(
            jPanelColoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelColoresLayout.createSequentialGroup()
                .addGroup(jPanelColoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelColoresLayout.createSequentialGroup()
                        .addComponent(BotonBlanco)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BotonAmarillo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BotonVerde))
                    .addGroup(jPanelColoresLayout.createSequentialGroup()
                        .addComponent(BotonNegro)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BotonRojo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BotonAzul)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanelColoresLayout.setVerticalGroup(
            jPanelColoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelColoresLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanelColoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BotonNegro)
                    .addComponent(BotonRojo)
                    .addComponent(BotonAzul))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelColoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BotonBlanco)
                    .addComponent(BotonAmarillo)
                    .addComponent(BotonVerde)))
        );

        BotonPunto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/prFinal/Lapiz.gif"))); // NOI18N
        Figura.add(BotonPunto);
        BotonPunto.setMaximumSize(new java.awt.Dimension(31, 31));
        BotonPunto.setMinimumSize(new java.awt.Dimension(31, 31));
        BotonPunto.setPreferredSize(new java.awt.Dimension(31, 31));
        BotonPunto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonPuntoActionPerformed(evt);
            }
        });

        BotonLinea.setIcon(new javax.swing.ImageIcon(getClass().getResource("/prFinal/Linea.gif"))); // NOI18N
        Figura.add(BotonLinea);
        BotonLinea.setMaximumSize(new java.awt.Dimension(31, 31));
        BotonLinea.setMinimumSize(new java.awt.Dimension(31, 31));
        BotonLinea.setPreferredSize(new java.awt.Dimension(31, 31));
        BotonLinea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonLineaActionPerformed(evt);
            }
        });

        BotonRect.setIcon(new javax.swing.ImageIcon(getClass().getResource("/prFinal/Rectangulo.gif"))); // NOI18N
        Figura.add(BotonRect);
        BotonRect.setMaximumSize(new java.awt.Dimension(31, 31));
        BotonRect.setMinimumSize(new java.awt.Dimension(31, 31));
        BotonRect.setPreferredSize(new java.awt.Dimension(31, 31));
        BotonRect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonRectActionPerformed(evt);
            }
        });

        BotonOval.setIcon(new javax.swing.ImageIcon(getClass().getResource("/prFinal/Ovalo.gif"))); // NOI18N
        Figura.add(BotonOval);
        BotonOval.setMaximumSize(new java.awt.Dimension(31, 31));
        BotonOval.setMinimumSize(new java.awt.Dimension(31, 31));
        BotonOval.setPreferredSize(new java.awt.Dimension(31, 31));
        BotonOval.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonOvalActionPerformed(evt);
            }
        });

        TextoGrosor1.setEditable(false);
        TextoGrosor1.setBackground(new java.awt.Color(240, 240, 240));
        TextoGrosor1.setText("    Línea");
        jScrollPaneLinea.setViewportView(TextoGrosor1);

        BoxLinea.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Contínua", "Punteada" }));
        BoxLinea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BoxLineaActionPerformed(evt);
            }
        });

        jButtonColorLChooser.setText("Elige color");
        jButtonColorLChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonColorLChooserActionPerformed(evt);
            }
        });

        panelColorL.setEditable(false);
        panelColorL.setBackground(new java.awt.Color(0, 0, 0));

        BotonRectOval.setIcon(new javax.swing.ImageIcon(getClass().getResource("/prFinal/rectangulo-1.png"))); // NOI18N
        Figura.add(BotonRectOval);
        BotonRectOval.setMaximumSize(new java.awt.Dimension(35, 31));
        BotonRectOval.setMinimumSize(new java.awt.Dimension(35, 31));
        BotonRectOval.setPreferredSize(new java.awt.Dimension(35, 31));
        BotonRectOval.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonRectOvalActionPerformed(evt);
            }
        });

        jButtonColorRChooser.setText("Elige color");
        jButtonColorRChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonColorRChooserActionPerformed(evt);
            }
        });

        panelColorR.setEditable(false);
        panelColorR.setBackground(new java.awt.Color(0, 0, 0));

        BoxRelleno.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Normal", "Degradado H", "Degradado V" }));
        BoxRelleno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BoxRellenoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelFormasLayout = new javax.swing.GroupLayout(jPanelFormas);
        jPanelFormas.setLayout(jPanelFormasLayout);
        jPanelFormasLayout.setHorizontalGroup(
            jPanelFormasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelFormasLayout.createSequentialGroup()
                .addComponent(jPanelColores, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanelFormasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelFormasLayout.createSequentialGroup()
                        .addGroup(jPanelFormasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonColorLChooser)
                            .addGroup(jPanelFormasLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(panelColorL, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(26, 26, 26)
                        .addGroup(jPanelFormasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Grosor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPaneGrosor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanelFormasLayout.createSequentialGroup()
                        .addComponent(jScrollPaneLinea, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(BoxLinea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(27, 27, 27)
                .addGroup(jPanelFormasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonColorRChooser)
                    .addGroup(jPanelFormasLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(panelColorR, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelFormasLayout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(BotonRelleno)
                        .addGap(18, 18, 18)
                        .addComponent(BoxRelleno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(16, 16, 16)
                .addGroup(jPanelFormasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelFormasLayout.createSequentialGroup()
                        .addComponent(BotonRect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(BotonOval, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelFormasLayout.createSequentialGroup()
                        .addComponent(BotonPunto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(BotonLinea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BotonRectOval, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(BotonMover)
                .addContainerGap(262, Short.MAX_VALUE))
        );
        jPanelFormasLayout.setVerticalGroup(
            jPanelFormasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelFormasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelFormasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelColores, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelFormasLayout.createSequentialGroup()
                        .addGroup(jPanelFormasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanelFormasLayout.createSequentialGroup()
                                .addGroup(jPanelFormasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanelFormasLayout.createSequentialGroup()
                                        .addGap(1, 1, 1)
                                        .addComponent(jScrollPaneLinea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelFormasLayout.createSequentialGroup()
                                        .addGap(0, 2, Short.MAX_VALUE)
                                        .addComponent(BoxLinea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                                .addGroup(jPanelFormasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButtonColorLChooser, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jScrollPaneGrosor, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanelFormasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(Grosor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(panelColorL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanelFormasLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(jPanelFormasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanelFormasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanelFormasLayout.createSequentialGroup()
                                            .addGroup(jPanelFormasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(BotonPunto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(BotonLinea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGap(38, 38, 38))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelFormasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(BotonRect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(BotonOval, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(jPanelFormasLayout.createSequentialGroup()
                                        .addGroup(jPanelFormasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(BotonMover)
                                            .addComponent(BotonRectOval, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(22, 22, 22))))
                            .addGroup(jPanelFormasLayout.createSequentialGroup()
                                .addGroup(jPanelFormasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(BotonRelleno, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(BoxRelleno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButtonColorRChooser)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(panelColorR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(12, 12, 12))))
        );

        jPanelEdicion.addTab("Edicion de formas", jPanelFormas);

        jPanelProcesamiento.setLayout(new javax.swing.BoxLayout(jPanelProcesamiento, javax.swing.BoxLayout.LINE_AXIS));

        jPanelBrillo.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Brillo", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.BELOW_TOP));

        deslizadorBrillo.setMajorTickSpacing(100);
        deslizadorBrillo.setMaximum(200);
        deslizadorBrillo.setMinimum(-200);
        deslizadorBrillo.setMinorTickSpacing(20);
        deslizadorBrillo.setPaintLabels(true);
        deslizadorBrillo.setPaintTicks(true);
        deslizadorBrillo.setValue(0);
        deslizadorBrillo.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        deslizadorBrillo.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                deslizadorBrilloStateChanged(evt);
            }
        });
        deslizadorBrillo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                deslizadorBrilloFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                deslizadorBrilloFocusLost(evt);
            }
        });

        javax.swing.GroupLayout jPanelBrilloLayout = new javax.swing.GroupLayout(jPanelBrillo);
        jPanelBrillo.setLayout(jPanelBrilloLayout);
        jPanelBrilloLayout.setHorizontalGroup(
            jPanelBrilloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBrilloLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(deslizadorBrillo, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelBrilloLayout.setVerticalGroup(
            jPanelBrilloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBrilloLayout.createSequentialGroup()
                .addContainerGap(27, Short.MAX_VALUE)
                .addComponent(deslizadorBrillo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanelProcesamiento.add(jPanelBrillo);

        jPanelRotacion.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Rotación", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.BELOW_TOP));

        deslizadorRotacion.setMajorTickSpacing(90);
        deslizadorRotacion.setMaximum(180);
        deslizadorRotacion.setMinimum(-180);
        deslizadorRotacion.setMinorTickSpacing(45);
        deslizadorRotacion.setPaintLabels(true);
        deslizadorRotacion.setPaintTicks(true);
        deslizadorRotacion.setValue(0);
        deslizadorRotacion.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                deslizadorRotacionStateChanged(evt);
            }
        });
        deslizadorRotacion.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                deslizadorRotacionFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                deslizadorRotacionFocusLost(evt);
            }
        });

        boton90.setIcon(new javax.swing.ImageIcon(getClass().getResource("/prFinal/rotacion90.png"))); // NOI18N
        boton90.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton90ActionPerformed(evt);
            }
        });

        boton180.setIcon(new javax.swing.ImageIcon(getClass().getResource("/prFinal/rotacion180.png"))); // NOI18N
        boton180.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton180ActionPerformed(evt);
            }
        });

        boton270.setIcon(new javax.swing.ImageIcon(getClass().getResource("/prFinal/rotacion270.png"))); // NOI18N
        boton270.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton270ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelRotacionLayout = new javax.swing.GroupLayout(jPanelRotacion);
        jPanelRotacion.setLayout(jPanelRotacionLayout);
        jPanelRotacionLayout.setHorizontalGroup(
            jPanelRotacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(deslizadorRotacion, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(jPanelRotacionLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(boton90)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(boton180)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(boton270)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelRotacionLayout.setVerticalGroup(
            jPanelRotacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelRotacionLayout.createSequentialGroup()
                .addComponent(deslizadorRotacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelRotacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(boton90, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(boton180, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(boton270, javax.swing.GroupLayout.Alignment.TRAILING)))
        );

        jPanelProcesamiento.add(jPanelRotacion);

        jPanelContraste.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Contraste", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.BELOW_TOP));

        botonContrNormal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/prFinal/contraste.png"))); // NOI18N
        botonContrNormal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonContrNormalActionPerformed(evt);
            }
        });

        botonContrIlum.setIcon(new javax.swing.ImageIcon(getClass().getResource("/prFinal/iluminar.png"))); // NOI18N
        botonContrIlum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonContrIlumActionPerformed(evt);
            }
        });

        botonContrOscur.setIcon(new javax.swing.ImageIcon(getClass().getResource("/prFinal/oscurecer.png"))); // NOI18N
        botonContrOscur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonContrOscurActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelContrasteLayout = new javax.swing.GroupLayout(jPanelContraste);
        jPanelContraste.setLayout(jPanelContrasteLayout);
        jPanelContrasteLayout.setHorizontalGroup(
            jPanelContrasteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelContrasteLayout.createSequentialGroup()
                .addComponent(botonContrNormal)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(botonContrIlum)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(botonContrOscur))
        );
        jPanelContrasteLayout.setVerticalGroup(
            jPanelContrasteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelContrasteLayout.createSequentialGroup()
                .addContainerGap(42, Short.MAX_VALUE)
                .addGroup(jPanelContrasteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(botonContrOscur)
                    .addComponent(botonContrNormal)
                    .addComponent(botonContrIlum))
                .addContainerGap())
        );

        jPanelProcesamiento.add(jPanelContraste);

        jPanelFiltro.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Filtro", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.BELOW_TOP));

        boxFiltro.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Medio", "Bonimial", "Enfoque", "Relieve", "Laplaciano", "Original" }));
        boxFiltro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boxFiltroActionPerformed(evt);
            }
        });
        boxFiltro.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                boxFiltroFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                boxFiltroFocusLost(evt);
            }
        });

        javax.swing.GroupLayout jPanelFiltroLayout = new javax.swing.GroupLayout(jPanelFiltro);
        jPanelFiltro.setLayout(jPanelFiltroLayout);
        jPanelFiltroLayout.setHorizontalGroup(
            jPanelFiltroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelFiltroLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(boxFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelFiltroLayout.setVerticalGroup(
            jPanelFiltroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelFiltroLayout.createSequentialGroup()
                .addContainerGap(47, Short.MAX_VALUE)
                .addComponent(boxFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanelProcesamiento.add(jPanelFiltro);

        jPanelEscala.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Escala", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.BELOW_TOP));

        jButtonAumen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/prFinal/aumentar.png"))); // NOI18N
        jButtonAumen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAumenActionPerformed(evt);
            }
        });

        jButtonDismin.setIcon(new javax.swing.ImageIcon(getClass().getResource("/prFinal/disminuir.png"))); // NOI18N
        jButtonDismin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDisminActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelEscalaLayout = new javax.swing.GroupLayout(jPanelEscala);
        jPanelEscala.setLayout(jPanelEscalaLayout);
        jPanelEscalaLayout.setHorizontalGroup(
            jPanelEscalaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelEscalaLayout.createSequentialGroup()
                .addComponent(jButtonAumen)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonDismin))
        );
        jPanelEscalaLayout.setVerticalGroup(
            jPanelEscalaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelEscalaLayout.createSequentialGroup()
                .addContainerGap(42, Short.MAX_VALUE)
                .addGroup(jPanelEscalaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonDismin)
                    .addComponent(jButtonAumen))
                .addContainerGap())
        );

        jPanelProcesamiento.add(jPanelEscala);

        jPanelEdicion.addTab("Procesamiento de imagen", jPanelProcesamiento);

        jPanelCenDo.add(jPanelEdicion, java.awt.BorderLayout.PAGE_START);
        jPanelEdicion.getAccessibleContext().setAccessibleName("Edicion");

        jPanelCenter.add(jPanelCenDo, java.awt.BorderLayout.PAGE_END);

        escritorio.setBackground(new java.awt.Color(0, 102, 153));
        escritorio.setPreferredSize(new java.awt.Dimension(915, 462));

        javax.swing.GroupLayout escritorioLayout = new javax.swing.GroupLayout(escritorio);
        escritorio.setLayout(escritorioLayout);
        escritorioLayout.setHorizontalGroup(
            escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 915, Short.MAX_VALUE)
        );
        escritorioLayout.setVerticalGroup(
            escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 262, Short.MAX_VALUE)
        );

        jPanelCenter.add(escritorio, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanelCenter, java.awt.BorderLayout.CENTER);

        MenuArchivo.setText("Archivo");

        MenuItemNuevo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.ALT_MASK));
        MenuItemNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/prFinal/NuevoBoceto.GIF"))); // NOI18N
        MenuItemNuevo.setText("Nuevo");
        MenuItemNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemNuevoActionPerformed(evt);
            }
        });
        MenuArchivo.add(MenuItemNuevo);

        MenuItemAbrir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.ALT_MASK));
        MenuItemAbrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/prFinal/AbrirMedio.png"))); // NOI18N
        MenuItemAbrir.setText("Abrir");
        MenuItemAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemAbrirActionPerformed(evt);
            }
        });
        MenuArchivo.add(MenuItemAbrir);

        MenuItemGuardar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.ALT_MASK));
        MenuItemGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/prFinal/Guardar.gif"))); // NOI18N
        MenuItemGuardar.setText("Guardar");
        MenuItemGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemGuardarActionPerformed(evt);
            }
        });
        MenuArchivo.add(MenuItemGuardar);

        MenuBar.add(MenuArchivo);

        MenuImagen.setText("Imagen");

        MenuItemReescalar.setText("Reescalar brillo");
        MenuItemReescalar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemReescalarActionPerformed(evt);
            }
        });
        MenuImagen.add(MenuItemReescalar);

        MenuItemFiltro.setText("Aplicar filtro");
        MenuItemFiltro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemFiltroActionPerformed(evt);
            }
        });
        MenuImagen.add(MenuItemFiltro);

        MenuItemRotar.setText("Rotar");
        MenuItemRotar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemRotarActionPerformed(evt);
            }
        });
        MenuImagen.add(MenuItemRotar);

        MenuItemContraste.setText("Negativo");
        MenuItemContraste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemContrasteActionPerformed(evt);
            }
        });
        MenuImagen.add(MenuItemContraste);

        MenuItemEscalar.setText("Escalar");
        MenuItemEscalar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemEscalarActionPerformed(evt);
            }
        });
        MenuImagen.add(MenuItemEscalar);

        MenuItemCombinar.setText("Combinar");
        MenuItemCombinar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemCombinarActionPerformed(evt);
            }
        });
        MenuImagen.add(MenuItemCombinar);

        MenuItemColorConv.setText("Escala de grises");
        MenuItemColorConv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemColorConvActionPerformed(evt);
            }
        });
        MenuImagen.add(MenuItemColorConv);

        MenuBar.add(MenuImagen);

        MenuSonido.setText("Sonido");

        MenuItemAudioPlay.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_U, java.awt.event.InputEvent.ALT_MASK));
        MenuItemAudioPlay.setText("Reproducir audio");
        MenuItemAudioPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemAudioPlayActionPerformed(evt);
            }
        });
        MenuSonido.add(MenuItemAudioPlay);

        MenuItemAudioRec.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.ALT_MASK));
        MenuItemAudioRec.setText("Grabar audio");
        MenuItemAudioRec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemAudioRecActionPerformed(evt);
            }
        });
        MenuSonido.add(MenuItemAudioRec);

        MenuBar.add(MenuSonido);

        MenuVideo.setText("Vídeo");

        MenuItemVideoPlay.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.ALT_MASK));
        MenuItemVideoPlay.setText("Reproducir vídeo");
        MenuItemVideoPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemVideoPlayActionPerformed(evt);
            }
        });
        MenuVideo.add(MenuItemVideoPlay);

        MenuBar.add(MenuVideo);

        setJMenuBar(MenuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void MenuItemNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemNuevoActionPerformed
        AtributosImagen ai = new AtributosImagen(this);
        this.escritorio.add(ai);
        ai.setTitle("Atributos");
        ai.setVisible(true);
    }//GEN-LAST:event_MenuItemNuevoActionPerformed

    private void BotonPuntoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonPuntoActionPerformed
        figura = 1;
        barraEstado.setText("Punto");
    }//GEN-LAST:event_BotonPuntoActionPerformed

    private void BotonLineaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonLineaActionPerformed
        figura = 2;
        barraEstado.setText("Línea");
    }//GEN-LAST:event_BotonLineaActionPerformed

    private void BotonRectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonRectActionPerformed
        figura = 3;
        barraEstado.setText("Rectángulo");
    }//GEN-LAST:event_BotonRectActionPerformed

    private void BotonOvalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonOvalActionPerformed
        figura = 4;
        barraEstado.setText("Elipse");
    }//GEN-LAST:event_BotonOvalActionPerformed

    private void MenuItemAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemAbrirActionPerformed
        JFileChooser dlg = new JFileChooser();        
        //filtro de imagen
        dlg.setFileFilter(filterCompatible);
        
        int resp = dlg.showOpenDialog(this);
        if( resp == JFileChooser.APPROVE_OPTION) {
            try{
                File f = dlg.getSelectedFile();
                String xt = getFileExtension(f);
        
                switch (xt){
                    case "jpg":
                        cargarImagen(f);
                        break;
                    case "gif":
                        cargarImagen(f);
                        break;
                    case "wav":
                        cargarSonido(f);
                        break;
                    case "avi":
                        cargarVideo(f);
                        break;
                    default:
                        System.err.println("Extensión de archivo desconocida");
                        break;
                }
            }catch(IOException ex){
                System.err.println("Error al leer el archivo");
            }
        }
        escritorio.repaint();
    }//GEN-LAST:event_MenuItemAbrirActionPerformed

    private void MenuItemGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemGuardarActionPerformed
        VentanaInterna vi = (VentanaInterna)escritorio.getSelectedFrame();

        BufferedImage img = vi.li.getImage();
        JFileChooser dlg = new JFileChooser();
        
        //filtro de imagen
        dlg.setFileFilter(filterImagen);
        
        int resp = dlg.showSaveDialog(this);
        
        if( resp == JFileChooser.APPROVE_OPTION) {
            try{
                File f = dlg.getSelectedFile();
                ImageIO.write(img,"jpg",f);
            }catch(IOException ex){
                System.err.println("Error al escribir la imagen");
            }
        }
    }//GEN-LAST:event_MenuItemGuardarActionPerformed

    private void GrosorStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_GrosorStateChanged
        grosor = (float) Grosor.getValue();
        escritorio.repaint();
    }//GEN-LAST:event_GrosorStateChanged

    private void BotonVerdeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonVerdeActionPerformed
        colorLinea = Color.green;
        panelColorL.setBackground(colorLinea);
        escritorio.repaint();
    }//GEN-LAST:event_BotonVerdeActionPerformed

    private void BotonAmarilloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonAmarilloActionPerformed
        colorLinea = Color.yellow;
        panelColorL.setBackground(colorLinea);
        escritorio.repaint();
    }//GEN-LAST:event_BotonAmarilloActionPerformed

    private void BotonBlancoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonBlancoActionPerformed
        colorLinea = Color.white;
        panelColorL.setBackground(colorLinea);
        escritorio.repaint();
    }//GEN-LAST:event_BotonBlancoActionPerformed

    private void BotonAzulActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonAzulActionPerformed
        colorLinea = Color.blue;
        panelColorL.setBackground(colorLinea);
        escritorio.repaint();
    }//GEN-LAST:event_BotonAzulActionPerformed

    private void BotonRojoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonRojoActionPerformed
        colorLinea = Color.red;
        panelColorL.setBackground(colorLinea);
        escritorio.repaint();
    }//GEN-LAST:event_BotonRojoActionPerformed

    private void BotonNegroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonNegroActionPerformed
        colorLinea = Color.black;
        panelColorL.setBackground(colorLinea);
        escritorio.repaint();
    }//GEN-LAST:event_BotonNegroActionPerformed

    private void MenuItemReescalarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemReescalarActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImage();
            if(imgSource!=null){
                try{
                    RescaleOp rop = new RescaleOp(1.0F, 100.0F, null);
                    BufferedImage imgdest = rop.filter(imgSource, null);
                    vi.getLienzo().setImage(imgdest);
                    vi.getLienzo().repaint();
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_MenuItemReescalarActionPerformed

    private void deslizadorBrilloStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_deslizadorBrilloStateChanged
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if(imgsrc != null){
            try{
                RescaleOp rop = new RescaleOp(1.0F, deslizadorBrillo.getValue(), null);
                imgsrc = convertImageType(imgsrc,BufferedImage.TYPE_INT_RGB);
                BufferedImage imgdest = rop.filter(imgsrc, null);
                vi.getLienzo().setImage(imgdest);
                vi.getLienzo().repaint();
            } catch(IllegalArgumentException e){
                System.err.println(e.getLocalizedMessage());
            }
        }
    }//GEN-LAST:event_deslizadorBrilloStateChanged

    private void deslizadorBrilloFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_deslizadorBrilloFocusGained
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null)
            imgsrc = vi.getLienzo().getImage();
    }//GEN-LAST:event_deslizadorBrilloFocusGained

    private void deslizadorBrilloFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_deslizadorBrilloFocusLost
        imgsrc = null;
    }//GEN-LAST:event_deslizadorBrilloFocusLost

    private void boxFiltroFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_boxFiltroFocusGained
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null)
            imgsrc = vi.getLienzo().getImage();
    }//GEN-LAST:event_boxFiltroFocusGained

    private void boxFiltroFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_boxFiltroFocusLost
        imgsrc = null;
    }//GEN-LAST:event_boxFiltroFocusLost

    private void boxFiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boxFiltroActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        imgsrc = convertImageType(imgsrc,BufferedImage.TYPE_INT_RGB);
        if(imgsrc != null){
            Kernel k = null;
            switch (boxFiltro.getSelectedIndex()){
                case 0:
                    k = KernelProducer.createKernel(KernelProducer.TYPE_MEDIA_3x3);
                    break;
                case 1:
                    k = KernelProducer.createKernel(KernelProducer.TYPE_BINOMIAL_3x3);
                    break;
                case 2:
                    k = KernelProducer.createKernel(KernelProducer.TYPE_ENFOQUE_3x3);
                    break;
                case 3:
                    k = KernelProducer.createKernel(KernelProducer.TYPE_RELIEVE_3x3);
                    break;
                case 4:
                    k = KernelProducer.createKernel(KernelProducer.TYPE_LAPLACIANA_3x3);
                    break;
                default:
                    break;
            }
            try{
                if (boxFiltro.getSelectedIndex() != 5){
                    ConvolveOp cop = new ConvolveOp(k);
                    BufferedImage imgdest = cop.filter(imgsrc,null);
                    vi.getLienzo().setImage(imgdest);
                }
                else
                    vi.getLienzo().setImage(imgsrc);
                
                vi.getLienzo().repaint();
            } catch(IllegalArgumentException e){
                System.err.println(e.getLocalizedMessage());
            }
        }
    }//GEN-LAST:event_boxFiltroActionPerformed

    private void MenuItemFiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemFiltroActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImage();
            if(imgSource != null){
                Kernel k = KernelProducer.createKernel(KernelProducer.TYPE_LAPLACIANA_3x3);
                try{
                    ConvolveOp cop = new ConvolveOp(k);
                    BufferedImage imgdest = cop.filter(imgSource,null);
                    vi.getLienzo().setImage(imgdest);
                    vi.getLienzo().repaint();
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_MenuItemFiltroActionPerformed

    private void MenuItemRotarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemRotarActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImage();
            if(imgSource != null){
                //AffineTransform at = AffineTransform.getScaleInstance(1.25,1.25);
                AffineTransform at = AffineTransform.getRotateInstance(Math.toRadians(180.0), imgSource.getWidth()/2,imgSource.getHeight()/2);
                //at = AffineTransform.getShearInstance(0.5,0.0);
                //at = AffineTransform.getTranslateInstance(20.0,20.0);
                try{
                    AffineTransformOp atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest = atop.filter(imgSource, null);
                    vi.getLienzo().setImage(imgdest);
                    vi.getLienzo().repaint();
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_MenuItemRotarActionPerformed

    private void MenuItemEscalarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemEscalarActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImage();
            if(imgSource != null){
                AffineTransform at = AffineTransform.getScaleInstance(1.25,1.25);
                //at = AffineTransform.getRotateInstance(Math.toRadians(180.0), imgSource.getWidth()/2,imgSource.getHeight()/2);
                //at = AffineTransform.getShearInstance(0.5,0.0);
                //at = AffineTransform.getTranslateInstance(20.0,20.0);
                try{
                    AffineTransformOp atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest = atop.filter(imgSource, null);
                    vi.getLienzo().setImage(imgdest);
                    vi.getLienzo().repaint();
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_MenuItemEscalarActionPerformed

    private void MenuItemContrasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemContrasteActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImage();
            if(imgSource != null){
                try{
                    LookupTable lt;
                    lt = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_NEGATIVE);
                    LookupOp lop = new LookupOp(lt, null);
                    /*short lt[] = new short[256];
                    for (int i=0; i<256; i++) lt[i] = (short)(256-i-1); // Negativo
                    ShortLookupTable slt = new ShortLookupTable(0, lt);
                    LookupOp lop = new LookupOp(slt, null);*/
                    BufferedImage imgdest = lop.filter(imgSource, imgSource);
                    vi.getLienzo().setImage(imgdest);
                    vi.getLienzo().repaint();
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_MenuItemContrasteActionPerformed

    private void MenuItemCombinarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemCombinarActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImage();
            if(imgSource != null){
                try{
                    WritableRaster rasterdest ;
                    BufferedImage imgdest ;
                    float [][] m = {{1.0F,0.0F,0.0F},{0.0F,0.0F,1.0F},{0.0F,1.0F,0.0F}};
                    BandCombineOp bcop = new BandCombineOp(m, null);
                    rasterdest = bcop.filter(imgSource.getRaster(),null);
                    imgdest = new BufferedImage(imgSource.getColorModel(), rasterdest,false,null);
                    vi.getLienzo().setImage(imgdest);
                    vi.getLienzo().repaint();
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_MenuItemCombinarActionPerformed

    private void MenuItemColorConvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemColorConvActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImage();
            if(imgSource != null){
                try{
                    ICC_Profile ip;
                    ip = ICC_Profile.getInstance(ColorSpace.CS_GRAY);
                    ColorSpace cs = new ICC_ColorSpace(ip);
                    ColorConvertOp ccop = new ColorConvertOp(cs,null);
                    BufferedImage imgdest = ccop.filter(imgSource,null);
                    vi.getLienzo().setImage(imgdest);
                    vi.getLienzo().repaint();
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_MenuItemColorConvActionPerformed

    private void boton180ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton180ActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImage();
            if(imgSource != null){
                AffineTransform at = AffineTransform.getRotateInstance(Math.toRadians(180.0), imgSource.getWidth()/2,imgSource.getHeight()/2);
                try{
                    AffineTransformOp atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest = atop.filter(imgSource, null);
                    vi.getLienzo().setImage(imgdest);
                    vi.getLienzo().repaint();
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_boton180ActionPerformed

    private void boton90ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton90ActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImage();
            if(imgSource != null){
                AffineTransform at = AffineTransform.getRotateInstance(Math.toRadians(90.0), imgSource.getWidth()/2,imgSource.getHeight()/2);
                try{
                    AffineTransformOp atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest = atop.filter(imgSource, null);
                    vi.getLienzo().setImage(imgdest);
                    vi.getLienzo().repaint();
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }        // TODO add your handling code here:
    }//GEN-LAST:event_boton90ActionPerformed

    private void boton270ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton270ActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImage();
            if(imgSource != null){
                AffineTransform at = AffineTransform.getRotateInstance(Math.toRadians(270.0), imgSource.getWidth()/2,imgSource.getHeight()/2);
                try{
                    AffineTransformOp atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest = atop.filter(imgSource, null);
                    vi.getLienzo().setImage(imgdest);
                    vi.getLienzo().repaint();
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }        // TODO add your handling code here:
    }//GEN-LAST:event_boton270ActionPerformed

    private void jButtonAumenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAumenActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImage();
            if(imgSource != null){
                AffineTransform at = AffineTransform.getScaleInstance(1.25,1.25);
                try{
                    AffineTransformOp atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest = atop.filter(imgSource, null);
                    vi.getLienzo().setImage(imgdest);
                    vi.getLienzo().repaint();
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_jButtonAumenActionPerformed

    private void jButtonDisminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDisminActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImage();
            if(imgSource != null){
                AffineTransform at = AffineTransform.getScaleInstance(0.75,0.75);
                try{
                    AffineTransformOp atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest = atop.filter(imgSource, null);
                    vi.getLienzo().setImage(imgdest);
                    vi.getLienzo().repaint();
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_jButtonDisminActionPerformed

    private void botonContrNormalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonContrNormalActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImage();
            if(imgSource != null){
                try{
                    LookupTable lt;
                    lt = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_SFUNCION);
                    LookupOp lop = new LookupOp(lt, null);
                    BufferedImage imgdest = lop.filter(imgSource, imgSource);
                    vi.getLienzo().setImage(imgdest);
                    vi.getLienzo().repaint();
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_botonContrNormalActionPerformed

    private void botonContrIlumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonContrIlumActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImage();
            if(imgSource != null){
                try{
                    LookupTable lt;
                    lt = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_ROOT);
                    LookupOp lop = new LookupOp(lt, null);
                    BufferedImage imgdest = lop.filter(imgSource, imgSource);
                    vi.getLienzo().setImage(imgdest);
                    vi.getLienzo().repaint();
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_botonContrIlumActionPerformed

    private void botonContrOscurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonContrOscurActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImage();
            if(imgSource != null){
                try{
                    LookupTable lt;
                    lt = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_POWER);
                    LookupOp lop = new LookupOp(lt, null);
                    BufferedImage imgdest = lop.filter(imgSource, imgSource);
                    vi.getLienzo().setImage(imgdest);
                    vi.getLienzo().repaint();
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }        // TODO add your handling code here:
    }//GEN-LAST:event_botonContrOscurActionPerformed

    private void deslizadorRotacionFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_deslizadorRotacionFocusGained
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null)
            imgsrc = vi.getLienzo().getImage();
    }//GEN-LAST:event_deslizadorRotacionFocusGained

    private void deslizadorRotacionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_deslizadorRotacionFocusLost
        imgsrc = null;
    }//GEN-LAST:event_deslizadorRotacionFocusLost

    private void deslizadorRotacionStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_deslizadorRotacionStateChanged
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if(imgsrc != null){
           AffineTransform at = AffineTransform.getRotateInstance(Math.toRadians((float)deslizadorRotacion.getValue()), imgsrc.getWidth()/2,imgsrc.getHeight()/2);
           try{
                AffineTransformOp atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                BufferedImage imgdest = atop.filter(imgsrc, null);
                vi.getLienzo().setImage(imgdest);
                vi.getLienzo().repaint();
            } catch(IllegalArgumentException e){
                System.err.println(e.getLocalizedMessage());
            }
        }
    }//GEN-LAST:event_deslizadorRotacionStateChanged

    private void MenuItemAudioPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemAudioPlayActionPerformed
        JFileChooser dlg = new JFileChooser();
        
        //filtro de audio
        dlg.setFileFilter(filterSound);
        
        int resp = dlg.showOpenDialog(this);
        if( resp == JFileChooser.APPROVE_OPTION) {
            try{
                File f = dlg.getSelectedFile();
                JInternalFrame ri = new ReproductorInterno(f);
                this.escritorio.add(ri);
                ri.setVisible(true);
                ri.setTitle(f.getName());
                barraEstado.setText("Lanzado Reproductor Interno");
            }catch(Exception ex){
              System.err.println("Error al leer el audio");
            }
        }
    }//GEN-LAST:event_MenuItemAudioPlayActionPerformed

    private void MenuItemVideoPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemVideoPlayActionPerformed
        JFileChooser dlg = new JFileChooser();
        
        //filtro de vídeo
        dlg.setFileFilter(filterVideo);
        
        int resp = dlg.showOpenDialog(this);
        if( resp == JFileChooser.APPROVE_OPTION) {
            try{
                File f = dlg.getSelectedFile();
                JInternalFrame riv = new VentanaInternaJMFPlayer(f);
                this.escritorio.add(riv);
                riv.setVisible(true);
                riv.setTitle(f.getName());
                barraEstado.setText("Lanzado Reproductor Interno de vídeo");
            }catch(Exception ex){
              System.err.println("Error al leer el vídeo");
            }
        }
    }//GEN-LAST:event_MenuItemVideoPlayActionPerformed

    private void MenuItemAudioRecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemAudioRecActionPerformed
        JFileChooser dlg = new JFileChooser();

        //filtro de audio
        dlg.setFileFilter(filterSound);

        int resp = dlg.showSaveDialog(this);

        if( resp == JFileChooser.APPROVE_OPTION) {
            try{
                File f = dlg.getSelectedFile();
                JInternalFrame ri = new GrabadorInterno(f);
                this.escritorio.add(ri);
                ri.setVisible(true);
                barraEstado.setText("Lanzado Grabador Interno");
            }catch(Exception ex){
                System.err.println("Error al grabar");
            }
        }
    }//GEN-LAST:event_MenuItemAudioRecActionPerformed

    private void jButtonColorLChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonColorLChooserActionPerformed
        Color color2 = JColorChooser.showDialog(this, "Seleccione un color", colorLinea);
        if (color2 != null)
            colorLinea = color2;
        panelColorL.setBackground(colorLinea);
    }//GEN-LAST:event_jButtonColorLChooserActionPerformed

    private void BotonRectOvalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonRectOvalActionPerformed
        figura = 5;
        barraEstado.setText("Rectángulo ovalado");
    }//GEN-LAST:event_BotonRectOvalActionPerformed

    private void BoxLineaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BoxLineaActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        vi.repaint();
    }//GEN-LAST:event_BoxLineaActionPerformed

    private void BotonRellenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonRellenoActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        vi.repaint();
    }//GEN-LAST:event_BotonRellenoActionPerformed

    private void jButtonColorRChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonColorRChooserActionPerformed
        Color color2 = JColorChooser.showDialog(this, "Seleccione un color", colorRelleno);
        if (color2 != null)
            colorRelleno = color2;
        panelColorR.setBackground(colorRelleno);
    }//GEN-LAST:event_jButtonColorRChooserActionPerformed

    private void BoxRellenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BoxRellenoActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        vi.repaint();
    }//GEN-LAST:event_BoxRellenoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFramePrFinal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFramePrFinal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFramePrFinal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFramePrFinal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFramePrFinal().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BotonAmarillo;
    private javax.swing.JButton BotonAzul;
    private javax.swing.JButton BotonBlanco;
    private javax.swing.JButton BotonLinea;
    private javax.swing.JCheckBox BotonMover;
    private javax.swing.JButton BotonNegro;
    private javax.swing.JButton BotonOval;
    private javax.swing.JButton BotonPunto;
    private javax.swing.JButton BotonRect;
    private javax.swing.JButton BotonRectOval;
    private javax.swing.JCheckBox BotonRelleno;
    private javax.swing.JButton BotonRojo;
    private javax.swing.JButton BotonVerde;
    private javax.swing.JComboBox BoxLinea;
    private javax.swing.JComboBox BoxRelleno;
    private javax.swing.ButtonGroup Colores;
    private javax.swing.ButtonGroup Figura;
    private javax.swing.JSpinner Grosor;
    private javax.swing.JMenu MenuArchivo;
    private javax.swing.JMenuBar MenuBar;
    private javax.swing.JMenu MenuImagen;
    private javax.swing.JMenuItem MenuItemAbrir;
    private javax.swing.JMenuItem MenuItemAudioPlay;
    private javax.swing.JMenuItem MenuItemAudioRec;
    private javax.swing.JMenuItem MenuItemColorConv;
    private javax.swing.JMenuItem MenuItemCombinar;
    private javax.swing.JMenuItem MenuItemContraste;
    private javax.swing.JMenuItem MenuItemEscalar;
    private javax.swing.JMenuItem MenuItemFiltro;
    private javax.swing.JMenuItem MenuItemGuardar;
    private javax.swing.JMenuItem MenuItemNuevo;
    private javax.swing.JMenuItem MenuItemReescalar;
    private javax.swing.JMenuItem MenuItemRotar;
    private javax.swing.JMenuItem MenuItemVideoPlay;
    private javax.swing.JMenu MenuSonido;
    private javax.swing.JMenu MenuVideo;
    private javax.swing.JTextPane TextoGrosor;
    private javax.swing.JTextPane TextoGrosor1;
    private javax.swing.JTextPane barraEstado;
    private javax.swing.JButton boton180;
    private javax.swing.JButton boton270;
    private javax.swing.JButton boton90;
    private javax.swing.JButton botonContrIlum;
    private javax.swing.JButton botonContrNormal;
    private javax.swing.JButton botonContrOscur;
    private javax.swing.JComboBox boxFiltro;
    private javax.swing.JSlider deslizadorBrillo;
    private javax.swing.JSlider deslizadorRotacion;
    private javax.swing.JDesktopPane escritorio;
    private javax.swing.JButton jButtonAumen;
    private javax.swing.JButton jButtonColorLChooser;
    private javax.swing.JButton jButtonColorRChooser;
    private javax.swing.JButton jButtonDismin;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JPanel jPanelBrillo;
    private javax.swing.JPanel jPanelCenDo;
    private javax.swing.JPanel jPanelCenter;
    private javax.swing.JPanel jPanelColores;
    private javax.swing.JPanel jPanelContraste;
    private javax.swing.JPanel jPanelDer;
    private javax.swing.JPanel jPanelDown;
    private javax.swing.JTabbedPane jPanelEdicion;
    private javax.swing.JPanel jPanelEscala;
    private javax.swing.JPanel jPanelFiltro;
    private javax.swing.JPanel jPanelFormas;
    private javax.swing.JPanel jPanelIzq;
    private javax.swing.JPanel jPanelProcesamiento;
    private javax.swing.JPanel jPanelRotacion;
    private javax.swing.JPanel jPanelUp;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPaneGrosor;
    private javax.swing.JScrollPane jScrollPaneLinea;
    private javax.swing.JTextField panelColorL;
    private javax.swing.JTextField panelColorR;
    // End of variables declaration//GEN-END:variables

//Ignorar código comentado
    
        //Inicial el stroke y setStroke
        /*float dash1[] = {10.0f};
        BasicStroke dashed = new BasicStroke(1.0f, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 10.0f, dash1, 0.0f);
        g2d.setStroke(dashed);
        */
            
        //Punto
        /*p.setLocation(p2);
        g2d.draw(p);
        */
        
        //Linea
        /*l.setLine(p1, p2);
        g2d.draw(l);
        */
        
        //Rectangulo
        /*double h, w, x = p1.getX(), y = p1.getY();
        h = p2.getY() - p1.getY();
        w = p2.getX() - p1.getX();
        
        if (h < 0){
            h = 0 - h;
            y = y - h;
        }
        if (w < 0){
            w = 0 - w;
            x = x - w;
        }
        
        r.setRect(x, y, w, h);
        */
        
        /*
        r.setFrameFromDiagonal(p1, p2);
        //g2d.fill(r);
        g2d.draw(r);
        */
               
        //Elipse
        /*e.setFrameFromDiagonal(p1, p2);
        //g2d.draw(e);
        g2d.fill(e);
        */
        
        //Arcotangente
        /*arc.setFrameFromCenter(p1, p2);
        g2d.draw(arc);
        */
        
        //Curva cuadratica
        /*qc.setCurve(p1, p3, p2);
        g2d.draw(qc);
        */
        
        //Curva cúbica
        /*cc.setCurve(p1, p3, p4, p2);
        g2d.draw(cc);
        */
        
        //Polilinea
        /*polyline.lineTo(p2.getX(), p2.getY());
        g2d.draw(polyline);
        */
        
        //Poligono
        /*polyline.lineTo(p2.getX(), p2.getY());
        polyline.closePath();
        g2d.draw(polyline)
        */
        
        //Shape
        /*for(Shape s:vShape) g2d.draw(s);
        if(l!=null) g2d.draw(l);
        */
                
        //PERA
        /*
        Dimension d = getSize();
        int w = d.width;
        int h = d.height;
        double ew = w/2;
        double eh = h/2;
         
         
 
        g2d.setColor(Color.green);
 
        // Creates the first leaf by filling the intersection of two Area objects created from an ellipse.
        leaf.setFrame(ew-16, eh-29, 15.0, 15.0);
        leaf1 = new Area(leaf);
        leaf.setFrame(ew-14, eh-47, 30.0, 30.0);
        leaf2 = new Area(leaf);
        leaf1.intersect(leaf2);  
        g2d.fill(leaf1);  
 
        // Creates the second leaf.
        leaf.setFrame(ew+1, eh-29, 15.0, 15.0);
        leaf1 = new Area(leaf);
        leaf2.intersect(leaf1);
        g2d.fill(leaf2);
 
        g2d.setColor(Color.black);
 
        // Creates the stem by filling the Area resulting from the subtraction of two Area objects created from an ellipse.
        stem.setFrame(ew, eh-42, 40.0, 40.0);
        st1 = new Area(stem);
        stem.setFrame(ew+3, eh-47, 50.0, 50.0);
        st2 = new Area(stem);
        st1.subtract(st2);
        g2d.fill(st1);
 
        g2d.setColor(Color.yellow);
 
        // Creates the pear itself by filling the Area resulting from the union of two Area objects created by two different ellipses.
        circle.setFrame(ew-25, eh, 50.0, 50.0);
        oval.setFrame(ew-19, eh-20, 40.0, 70.0);
        circ = new Area(circle);
        ov = new Area(oval);
        circ.add(ov);
        g2d.fill(circ);
        
        //END of PERA
        */
    /**
     * Función que devuelve si editar está seleccionado
     * @return 
     */
    public boolean editar (){
        return BotonMover.isSelected();
    }
    
    /**
     * Función que devuelve si relleno está seleccionado
     * @return 
     */
    public boolean relleno (){
        return BotonRelleno.isSelected();
    }
    
    /**
     * Función que devuelve el tipo de relleno seleccionado
     * @return 
     */
    public int tipoRelleno (){
        return BoxRelleno.getSelectedIndex();
    }
    
    /**
     * Función que devuelve el color de relleno
     * @return 
     */
    public Color colorRelleno (){
        return colorRelleno;
    }
    
    /**
     * Función que devuelve el color de las líneas
     * @return 
     */
    public Color colorLinea (){
        return colorLinea;
    }
    
    /**
     * Función que devuelve el tipo de figura seleccionada
     * @return 
     */
    public int figura (){
        return figura;
    }
    
    /**
     * Función que devuelve el grosor de las líneas
     * @return 
     */
    public float grosor(){
        return grosor;
    }
    
    /**
     * Función que devuelve el tipo de línea
     * @return 
     */
    public boolean lineaPunteada (){
        if (BoxLinea.getSelectedIndex() == 0)
            return false;
        return true;
    }
    
    /**
     * Función que actualiza el texto de la barra de estado
     * @param st 
     */
    public void setBarraEstado (String st){
        barraEstado.setText(st);
    }
    
    /**
     * Función que almacena los datos de la imagen a crear
     * @param nombre
     * @param ancho
     * @param alto 
     */
    public void setDatosImagen (String nombre, int ancho, int alto){
        nombreImagen = nombre;
        alturaImagen = alto;
        anchoImagen = ancho;
    }
    
    /**
     * Función que abre un nuevo lienzo en blanco
     */
    public void crearNuevoLienzo(){
        VentanaInterna vi = new VentanaInterna(this);
        BufferedImage img = crearImagen();
        vi.getLienzo().setImage(img);
        escritorio.add(vi);
        vi.setTitle(nombreImagen);
        vi.setVisible(true);
    }

    /** 
     * Función que convierte una imagen a un tipo dado
     */
    private BufferedImage convertImageType (BufferedImage img, int type){
     
        if(img != null){
            BufferedImage imgOut = new BufferedImage(img.getWidth(), img.getHeight(), type);
            Graphics2D g2d = imgOut.createGraphics();
            g2d.drawImage(img,0,0,null);
            return imgOut;
        }
        else
            return null;
    }
    
    /**
     * Función que crea una imagen según los datos almacenados en la clase y la devuelve como return
     * @return 
     */
    public BufferedImage crearImagen() {
        
        BufferedImage bufferedImage = new BufferedImage (anchoImagen, alturaImagen, BufferedImage.TYPE_INT_RGB);
        Graphics2D g2 = bufferedImage.createGraphics();
        g2.setRenderingHint (RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        g2.setColor(Color.white);
        g2.fillRect(0, 0, anchoImagen, alturaImagen);
        

        g2.dispose();
        return bufferedImage;
    }
    
    /**
     * Función que recibe un dato de archivo f y devuelve su extensión
     * @param f
     * @return 
     */
    private String getFileExtension (File f){
        int i = f.getName().lastIndexOf('.');
        if (i > 0) 
            return f.getName().substring(i+1);
        return null;
    }
    
    /**
     * Función que dado un archivo de imagen f, crea un nuevo lienzo con esa imagen
     * @param f
     * @throws IOException 
     */
    private void cargarImagen(File f) throws IOException{        
        BufferedImage img = ImageIO.read(f);
        VentanaInterna vi = new VentanaInterna(this);
        vi.getLienzo().setImage(img);
        this.escritorio.add(vi);
        vi.setTitle(f.getName());
        vi.setVisible(true);
        barraEstado.setText("Lanzada ventana de imagen");
    }

    /**
     * Función que dado un archivo de vídeo f, crea un nuevo reproductor interno con dicho vídeo
     * @param f
     * @throws IOException 
     */
    private void cargarVideo(File f){
        JInternalFrame riv = new VentanaInternaJMFPlayer(f);
        this.escritorio.add(riv);
        riv.setVisible(true);
        riv.setTitle(f.getName());
        barraEstado.setText("Lanzado Reproductor Interno de vídeo");
    }
    
    /**
     * Función que dado un archivo de sonido f, crea un nuevo reproductor interno con ese sonido
     * @param f
     * @throws IOException 
     */
    private void cargarSonido(File f){
        JInternalFrame ri = new ReproductorInterno(f);
        this.escritorio.add(ri);
        ri.setVisible(true);
        ri.setTitle(f.getName());
        barraEstado.setText("Lanzado Reproductor Interno de audio");
    }
}
